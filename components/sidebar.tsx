"use client"

import { useState, useEffect, useRef } from "react"
import { usePathname, useRouter, useSearchParams } from "next/navigation"
import {
  Apple,
  Beer,
  Beef,
  ChevronsUpIcon as Cheese,
  Coffee,
  Grape,
  Milk,
  PanelLeftClose,
  PanelLeftOpen,
  ShoppingBasket,
  Banana,
  Cherry,
  Fish,
  Egg,
  Salad,
  Sandwich,
  Pizza,
  Cake,
  IceCream,
  Candy,
  Popcorn,
  Cookie,
  Croissant,
  Soup,
  Carrot,
  CitrusIcon as Lemon,
  Wheat,
  Wine,
  Utensils,
  type LucideIcon,
} from "lucide-react"

import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { getClientSupabaseClient } from "@/lib/supabase/client"
import type { Category } from "@/lib/types"

// Mapping de toutes les ic√¥nes disponibles
const iconComponents: Record<string, LucideIcon> = {
  Apple,
  Beer,
  Beef,
  Cheese,
  Coffee,
  Grape,
  Milk,
  ShoppingBasket,
  Banana,
  Cherry,
  Fish,
  Egg,
  Salad,
  Sandwich,
  Pizza,
  Cake,
  IceCream,
  Candy,
  Popcorn,
  Cookie,
  Croissant,
  Soup,
  Carrot,
  Lemon,
  Wheat,
  Wine,
  Utensils,
}

export function Sidebar() {
  // Sidebar r√©tract√©e par d√©faut
  const [isOpen, setIsOpen] = useState(false)
  const [categories, setCategories] = useState<Category[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const supabase = getClientSupabaseClient()
  const sidebarRef = useRef<HTMLDivElement>(null)

  const currentCategory = searchParams.get("categorie") || "tous"

  // Gestionnaire pour fermer la sidebar lors d'un clic √† l'ext√©rieur
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (isOpen && sidebarRef.current && !sidebarRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [isOpen])

  // Charger les cat√©gories depuis Supabase
  useEffect(() => {
    const fetchCategories = async () => {
      setIsLoading(true)
      try {
        const { data, error } = await supabase.from("categories").select("*").order("name")

        if (error) throw error

        // üëá conversion propre
        setCategories((data as unknown as Category[]) || [])
      } catch (error) {
        console.error("Erreur lors du chargement des cat√©gories:", error)
      } finally {
        setIsLoading(false)
      }
    }

    fetchCategories()
  }, [supabase])

  // Ajouter la cat√©gorie "Tous les produits" au d√©but
  const allCategories = [{ id: "tous", name: "Tous les produits", slug: "tous", icon: "ShoppingBasket" }, ...categories]

  const handleCategoryClick = (categorySlug: string) => {
    const params = new URLSearchParams(searchParams.toString())
    if (categorySlug === "tous") {
      params.delete("categorie")
    } else {
      params.set("categorie", categorySlug)
    }
    router.push(`${pathname}?${params.toString()}`)

    // Fermer la sidebar apr√®s la s√©lection d'une cat√©gorie sur mobile
    if (window.innerWidth < 768) {
      setIsOpen(false)
    }
  }

  // Fonction pour obtenir le composant d'ic√¥ne √† partir du nom stock√© dans la base de donn√©es
  const getIconComponent = (iconName: string): LucideIcon => {
    // V√©rifier si l'ic√¥ne existe dans notre mapping
    if (iconName && iconComponents[iconName]) {
      return iconComponents[iconName]
    }

    // Ic√¥ne par d√©faut si l'ic√¥ne n'est pas trouv√©e
    return Coffee
  }

  return (
    <>
      {/* Overlay semi-transparent qui appara√Æt derri√®re la sidebar quand elle est ouverte */}
      {isOpen && <div className="fixed inset-0 bg-black/20 z-40 md:hidden" onClick={() => setIsOpen(false)} />}

      <div
        ref={sidebarRef}
        className={`
          fixed top-0 pt-20 left-0 h-screen z-40
          ${isOpen ? "w-64" : "w-16"} 
          transition-all duration-300 
          border-r bg-slate-50 shadow-lg
        `}
      >
        <Button
          variant="ghost"
          size="icon"
          className="absolute right-[-12px] top-20 z-10 h-6 w-6 rounded-full border bg-background"
          onClick={() => setIsOpen(!isOpen)}
        >
          {isOpen ? <PanelLeftClose className="h-4 w-4" /> : <PanelLeftOpen className="h-4 w-4" />}
          <span className="sr-only">Toggle Sidebar</span>
        </Button>

        <div className="p-4">
          <h2 className={`font-semibold mb-4 ${isOpen ? "text-lg" : "sr-only"}`}>Cat√©gories</h2>

          <ScrollArea className="h-[calc(100vh-8rem-20px)]">
            <div className="space-y-1">
              {isLoading
                ? Array.from({ length: 5 }).map((_, i) => (
                    <div key={i} className="h-10 bg-slate-200 animate-pulse rounded-md mb-2"></div>
                  ))
                : allCategories.map((category) => {
                    const isActive = currentCategory === category.slug

                    // Utiliser l'ic√¥ne de la base de donn√©es
                    const IconComponent = getIconComponent(category.icon ?? "Coffee")

                    return (
                      <Button
                        key={category.id}
                        variant={isActive ? "secondary" : "ghost"}
                        className={`w-full ${isOpen ? "justify-start" : "justify-center px-0"}`}
                        onClick={() => handleCategoryClick(category.slug)}
                        title={!isOpen ? category.name : undefined}
                      >
                        <IconComponent className={`h-5 w-5 ${isOpen ? "mr-2" : ""} flex-shrink-0`} />
                        {isOpen && <span className="truncate">{category.name}</span>}
                      </Button>
                    )
                  })}
            </div>
          </ScrollArea>
        </div>
      </div>

      {/* Espace r√©serv√© pour maintenir la mise en page avec la sidebar r√©tract√©e */}
      <div className="w-16 flex-shrink-0 pt-[20px]"></div>
    </>
  )
}

